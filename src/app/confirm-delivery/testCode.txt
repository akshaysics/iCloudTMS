  // onChange(event: any) {
  //   console.log("event:", event);
  //   this.selectedMedia = event.target.files;
  //   console.log("selectedMedia:", this.selectedMedia);

  //   var files = event.target.files;
  //   var file = files[0];

  //   if (files && file) {
  //     var reader = new FileReader();

  //     reader.onload = this._handleReaderLoaded.bind(this);

  //     reader.readAsBinaryString(file);
  //   }

  // }
  // _handleReaderLoaded(readerEvt) {
  //   var binaryString = readerEvt.target.result;
  //   this.base64textString = btoa(binaryString);
  //   console.log(btoa(binaryString));
  //   console.log("base64textString:", this.base64textString);
  // }



                    // this.images.push(base64string);
                  // console.log('images:', this.images);
                  // this.file
                  //   .resolveDirectoryUrl(this.file.cacheDirectory)
                  //   .then((data) => {
                  //     console.log('nativeURL:', data.nativeURL);
                  //     this.file
                  //       .moveFile(path, filename, data.nativeURL, filename)
                  //       .then((respData) => {
                  //         console.log('respData:', respData);
                  //         console.log('nativeURL:', respData.nativeURL);
                  //         this.caminhoImg.push(respData.nativeURL);
                  //         console.log('caminhoImg:', this.caminhoImg);
                  //       })
                  //       .catch((error) => console.log(error));
                  //   });





                    limpaDiretorio() {
    this.file
      .resolveDirectoryUrl(this.file.externalRootDirectory)
      .then((data) => {
        console.log('data:', data);
        const caminho = data.nativeURL;
        console.log('caminho:', caminho);
        this.file
          .removeRecursively(caminho, 'scanSample')
          .then((res) => {
            console.log('res:', res);
            this.limpaCache();
          })
          .catch((error) => {
            console.log(error);
            this.limpaCache();
          });
      })
      .catch((error) => console.log(error));
  }



    limpaCache() {
    this.file.resolveDirectoryUrl(this.file.cacheDirectory).then((data) => {
      console.log('data:', data);
      this.file.listDir(data.nativeURL, '').then(async (res) => {
        console.log('res:', res);
        if (res.length > 0) {
          for (let i = 0; i < res.length; i++) {
            await this.file
              .resolveLocalFilesystemUrl(res[i].nativeURL)
              .then((newNativeURL) => {
                console.log('newNativeURL:', newNativeURL);
                newNativeURL.remove(
                  () => console.log('sucesso ao excluir'),
                  () => console.log('Erro ao excluir')
                );
              });
          }
        }
      });
    });
  }




    pickImage(sourceType) {
    const options: CameraOptions = {
      quality: 100,
      sourceType: sourceType,
      correctOrientation: true,
      destinationType: this.camera.DestinationType.DATA_URL,
      encodingType: this.camera.EncodingType.JPEG,
      mediaType: this.camera.MediaType.PICTURE,
    };

    this.camera.getPicture(options).then(
      async (imageData) => {
        this.base64textString = imageData;
        console.log('base64textString:', this.base64textString);
      },
      (err) => {
        console.log('Error:', err);
      }
    );
  }



    // gotoPage(page: string) {
  //   const navigationExtras: NavigationExtras = {
  //     state: {
  //       payroll: this.tripDetails
  //     }
  //   };
  //   this.common.router.navigate([page], navigationExtras);
  // }
